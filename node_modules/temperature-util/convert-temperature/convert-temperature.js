"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertTemperature = void 0;

var _temperatureMeasurements = require("../constants/temperature-measurements");

var _celsius = require("../celsius/celsius");

var _fahrenheit = require("../fahrenheit/fahrenheit");

var _kelvin = require("../kelvin/kelvin");

var _rankine = require("../rankine/rankine");

/**
 * This function converts a temperature from one measurement to another.
 *
 * @param {number} value - a temperature
 * @param {string} fromMeasurement - the temperature measurement of the value param
 * @param {number} toMeasurement - the target temperature measurement
 * @return {number} the value param converted from the fromMeasurement param to the toMeasurement param
 *
 * @example
 *   convertTemperature(100, 'celsius', 'fahrenheit');
 */
var convertTemperature = function convertTemperature(temperature) {
  var fromMeasurement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.CELSIUS;
  var toMeasurement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.FAHRENHEIT;

  if (typeof temperature !== 'number') {
    console.error('Temperature is not a number.');
    return undefined;
  }

  switch (fromMeasurement) {
    case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.CELSIUS:
      switch (toMeasurement) {
        case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.FAHRENHEIT:
          return (0, _celsius.celsiusToFahrenheit)(temperature);

        case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.KELVIN:
          return (0, _celsius.celsiusToKelvin)(temperature);

        case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.RANKINE:
          return (0, _celsius.celsiusToRankine)(temperature);

        default:
          console.error('To measurement is invalid.');
          return temperature;
      }

    case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.FAHRENHEIT:
      switch (toMeasurement) {
        case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.CELSIUS:
          return (0, _fahrenheit.fahrenheitToCelsius)(temperature);

        case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.KELVIN:
          return (0, _fahrenheit.fahrenheitToKelvin)(temperature);

        case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.RANKINE:
          return (0, _fahrenheit.fahrenheitToRankine)(temperature);

        default:
          console.error('To measurement is invalid.');
          return temperature;
      }

    case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.KELVIN:
      switch (toMeasurement) {
        case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.CELSIUS:
          return (0, _kelvin.kelvinToCelsius)(temperature);

        case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.FAHRENHEIT:
          return (0, _kelvin.kelvinToFahrenheit)(temperature);

        case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.RANKINE:
          return (0, _kelvin.kelvinToRankine)(temperature);

        default:
          console.error('To measurement is invalid.');
          return temperature;
      }

    case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.RANKINE:
      switch (toMeasurement) {
        case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.CELSIUS:
          return (0, _rankine.rankineToCelsius)(temperature);

        case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.FAHRENHEIT:
          return (0, _rankine.rankineToFahrenheit)(temperature);

        case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.KELVIN:
          return (0, _rankine.rankineToKelvin)(temperature);

        default:
          console.error('To measurement is invalid.');
          return temperature;
      }

    default:
      console.error('From measurement is invalid.');
      return temperature;
  }
};

exports.convertTemperature = convertTemperature;