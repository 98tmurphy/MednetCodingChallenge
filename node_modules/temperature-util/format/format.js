"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatTemperature = exports.formatToRankine = exports.formatToKelvin = exports.formatToFahrenheit = exports.formatToCelsius = void 0;

var _temperatureMeasurements = require("../constants/temperature-measurements");

var _temperatureMeasurementAbbreviations = require("../constants/temperature-measurement-abbreviations");

/**
 * This function appends a temperature with the Celsius temperature measurement abbreviation.
 *
 * @param {number|string} celsius - a temperature in Celsius
 * @return {string} the Celsius temperature appended with the Celsius temperature abbreviation
 *
 * @example
 *   formatToCelsius(100)
 */
var formatToCelsius = function formatToCelsius(celsius) {
  return "".concat(celsius, " ").concat(_temperatureMeasurementAbbreviations.TEMPERATURE_MEASUREMENT_ABBREVIATIONS.CELSIUS);
};
/**
 * This function appends a temperature with the Fahrenheit temperature measurement abbreviation.
 *
 * @param {number|string} fahrenheit - a temperature in Fahrenheit
 * @return {string} the Fahrenheit temperature appended with the Fahrenheit temperature abbreviation
 *
 * @example
 *   formatToCelsius(100)
 */


exports.formatToCelsius = formatToCelsius;

var formatToFahrenheit = function formatToFahrenheit(fahrenheit) {
  return "".concat(fahrenheit, " ").concat(_temperatureMeasurementAbbreviations.TEMPERATURE_MEASUREMENT_ABBREVIATIONS.FAHRENHEIT);
};
/**
 * This function appends a temperature with the Kelvin temperature measurement abbreviation.
 *
 * @param {number|string} kelvin - a temperature in Kelvin
 * @return {string} the Kelvin temperature appended with the Kelvin temperature abbreviation
 *
 * @example
 *   formatToKelvin(100)
 */


exports.formatToFahrenheit = formatToFahrenheit;

var formatToKelvin = function formatToKelvin(kelvin) {
  return "".concat(kelvin, " ").concat(_temperatureMeasurementAbbreviations.TEMPERATURE_MEASUREMENT_ABBREVIATIONS.KELVIN);
};
/**
 * This function appends a temperature with the Rankine temperature measurement abbreviation.
 *
 * @param {number|string} rankine - a temperature in Rankine
 * @return {string} the Rankine temperature appended with the Rankine temperature abbreviation
 *
 * @example
 *   formatToRankine(100)
 */


exports.formatToKelvin = formatToKelvin;

var formatToRankine = function formatToRankine(rankine) {
  return "".concat(rankine, " ").concat(_temperatureMeasurementAbbreviations.TEMPERATURE_MEASUREMENT_ABBREVIATIONS.RANKINE);
};
/**
 * This function appends a temperature with the Rankine temperature measurement abbreviation.
 *
 * @param {number|string} temperature - a temperature
 * @param {string} measurement - a temperature measurement
 * @return {string} the temperature appended with the temperature measurement abbreviation
 *
 * @example
 *   formatTemperature(100, 'celsius')
 */


exports.formatToRankine = formatToRankine;

var formatTemperature = function formatTemperature(temperature) {
  var measurement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.CELSIUS;

  if (typeof temperature !== 'number' && typeof temperature !== 'string') {
    console.error('Temperature parameter is invalid.');
    return '';
  }

  switch (measurement) {
    case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.CELSIUS:
      return formatToCelsius(temperature);

    case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.FAHRENHEIT:
      return formatToFahrenheit(temperature);

    case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.KELVIN:
      return formatToKelvin(temperature);

    case _temperatureMeasurements.TEMPERATURE_MEASUREMENTS.RANKINE:
      return formatToRankine(temperature);

    default:
      console.error('Measurement parameter is invalid.');
      return temperature;
  }
};

exports.formatTemperature = formatTemperature;